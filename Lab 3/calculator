; =================== ROM Routine Definitions ===================
; Original: define      SCINIT      $ff81 ; initialize/clear screen
;define      SCINIT      $ff81 ; initialize/clear screen
define      CLEAR_SCREEN $ff81   ; (changed name)

; Original: define      CHRIN       $ffcf ; input character from keyboard
;define      CHRIN       $ffcf ; input character from keyboard
define      GET_CHAR    $ffcf   ; (changed name)

; Original: define      CHROUT      $ffd2 ; output character to screen
;define      CHROUT      $ffd2 ; output character to screen
define      PUT_CHAR    $ffd2   ; (changed name)

; =================== Zeroâ€‘Page Variable Definitions ===================
; Original: define      PRINT_PTR   $10
;define      PRINT_PTR   $10
define      PRNT_PTR    $10     ; (renamed)

; Original: define      PRINT_PTR_H $11
;define      PRINT_PTR_H $11
define      PRNT_PTR_H  $11     ; (renamed)

; Original: define      value       $14
;define      value       $14
define      SUM_BCD     $14     ; now holds the minuend/result (changed function)

; Original: define      value_h     $15
;define      value_h     $15
define      SUM_H       $15     ; holds the hundreds digit (changed naming)

; Original: define    operation $1
;define    operation $1
define      OP_CODE     $01     ; (renamed)

; Original: define    XPOS $20
;define    XPOS $20
define      CUR_X       $20     ; (renamed)

; Original: define    YPOS $21
;define    YPOS $21
define      CUR_Y       $21     ; (renamed)

; New variable for second number (subtrahend)
; Using a free zero-page location ($1E)
define      SUB_NUM     $1E     ; holds second number for subtraction

; Temporary storage for swapping (if needed)
define      TEMP_BCD    $1F     ; temporary storage for swapping numbers

; =================== Absolute Variable Definitions ===================
; Original: define      GETNUM_1    $0080
;define      GETNUM_1    $0080
define      NUM1_BUF    $0080   ; (renamed)

; Original: define      GETNUM_2    $0081
;define      GETNUM_2    $0081
define      NUM2_BUF    $0081   ; (renamed)

; =================== Initialization and Setup ===================
LDA #$05                    
STA $12         ; image width = 5 pixels
STA $13         ; image height = 5 pixels

LDA #$01                    
; Original: STA XPOS
;STA XPOS
STA CUR_X       ; (changed)
; Original: STA YPOS
;STA YPOS
STA CUR_Y       ; (changed)

JSR CLEAR_SCREEN   ; call CLEAR_SCREEN (was SCINIT)
JSR GET_CHAR       ; pause for a key (was CHRIN)
JSR PRINT_STR      ; print the banner string (modified PRINT subroutine)
dcb "C","a","l","c","u","l","a","t","o","r",00  ; banner remains the same

; =================== Main Routine: SUBTRACTNUMBERS ===================
; Changed label from ADDNUMBERS to SUBTRACTNUMBERS and functionality from addition to subtraction.
SUBTRACTNUMBERS:
    ; --- Prompt for first number ---
    JSR PRINT_STR
    ; Original prompt combined, now:
    dcb $0D,$0D,"E","n","t","e","r",32,"f","i","r","s","t",32,"n","u","m","b","e","r",":",32,00  ; (modified prompt)
    
    LDA #$00                    
    ; Original: STA value_h
    ;STA value_h
    STA SUM_H       ; clear hundreds digit (renamed)
    JSR GET_NUMBER  ; get first number (modified subroutine, renamed GET_NUMBER)
    STA SUM_BCD     ; store first number in SUM_BCD

    ; --- Prompt for second number ---
    JSR PRINT_STR
    dcb "E","n","t","e","r",32,"s","e","c","o","n","d",32,"n","u","m","b","e","r",":",32,00  ; (modified prompt)
    JSR GET_NUMBER  ; get second number; result in A
    STA SUB_NUM     ; store second number in SUB_NUM

    ; --- Compare and swap if necessary ---
    LDA SUM_BCD
    CMP SUB_NUM
    BCS DO_SUB      ; if first number >= second, continue subtraction
    ; Otherwise, display minus sign and swap the numbers:
    LDA #$2D       ; ASCII '-' is $2D
    JSR PUT_CHAR
    LDA SUM_BCD    ; save original first number in TEMP_BCD
    STA TEMP_BCD
    LDA SUB_NUM    ; move second number into SUM_BCD
    STA SUM_BCD
    LDA TEMP_BCD   ; move original first number into SUB_NUM
    STA SUB_NUM

DO_SUB:
    ; --- Perform BCD Subtraction ---
    SED             ; set decimal mode
    CLC             ; clear carry flag
    SBC SUB_NUM     ; subtract SUB_NUM from SUM_BCD
    CLD             ; clear decimal mode
    STA SUM_BCD     ; store the result

    ; --- Display the Result ---
    PHA
    JSR PRINT_STR
    dcb "R","e","s","u","l","t",":",32,32,32,32,32,00  ; modified prompt with fewer spaces

    ; --- Process Hundreds Digit (if any) ---
    LDA SUM_H
    BEQ PROC_TENS   ; if hundreds digit is zero, skip it
    AND #$0F
    ORA #$30
    JSR PUT_CHAR

    JSR UPDATE_GFX  ; update graphic pointer for this digit
    LDA #$10
    LDX CUR_X
    LDY CUR_Y
    JSR DRAW_IMAGE  ; draw hundreds digit graphic
    LDA CUR_X
    CLC
    ADC #$06
    STA CUR_X
    JMP PROC_TENS

    ; --- Process Tens Digit ---
PROC_TENS:
    LDA SUM_BCD
    AND #$F0       ; extract tens digit
    BEQ PROC_ONES  ; if zero, skip to ones digit

    LDA SUM_BCD
    LSR
    LSR
    LSR
    LSR
    ORA #$30
    JSR PUT_CHAR

    JSR UPDATE_GFX  ; update graphic pointer for tens digit
    LDA #$10
    LDX CUR_X
    LDY CUR_Y
    JSR DRAW_IMAGE
    LDA CUR_X
    CLC
    ADC #$06
    STA CUR_X

    ; --- Process Ones Digit ---
PROC_ONES:
    LDA SUM_BCD
    AND #$0F       ; extract ones digit
    ORA #$30
    JSR PUT_CHAR

    JSR UPDATE_GFX  ; update graphic pointer for ones digit
    LDA #$10
    LDX CUR_X
    LDY CUR_Y
    JSR DRAW_IMAGE
    LDA CUR_X
    CLC
    ADC #$06
    STA CUR_X

    RTS

; =================== Subroutine: DRAW_IMAGE ===================
; (Renamed from DRAW, as in previous modifications)
define      IMG_PTR    $A0   ; (was IMGPTR)
define      IMG_PTR_H  $A1   ; (was IMGPTRH)
define      IMG_W      $A2   ; (was IMGWIDTH)
define      IMG_H      $A3   ; (was IMGHEIGHT)
define      SCR_PTR    $A4   ; (was SCRPTR)
define      SCR_PTR_H  $A5   ; (was SCRPTRH)
define      SCR_X      $A6   ; (was SCRX)
define      SCR_Y      $A7   ; (was SCRY)

DRAW_IMAGE:
    STY SCR_Y
    STX SCR_X

    TAY
    LDA $0006,Y
    STA IMG_PTR
    LDA $0007,Y
    STA IMG_PTR_H
    LDA $0002,Y
    STA IMG_W
    LDA $0003,Y
    STA IMG_H

    ; Calculate screen address: $0200 + SCR_X + (SCR_Y * 32)
    LDA #$00
    STA SCR_PTR_H
    LDA SCR_Y
    STA SCR_PTR
    LDY #$05
SHIFT_LOOP:
    ASL SCR_PTR
    ROL SCR_PTR_H
    DEY
    BNE SHIFT_LOOP

    LDA SCR_X
    CLC
    ADC SCR_PTR
    STA SCR_PTR
    LDA #$00
    ADC SCR_PTR_H
    STA SCR_PTR_H

    LDA #$02
    CLC
    ADC SCR_PTR_H
    STA SCR_PTR_H

    ; Copy image data row by row
ROW_COPY:
    LDY #$00
ROW_LOOP:
    LDA (IMG_PTR),Y
    STA (SCR_PTR),Y
    INY
    CPY IMG_W
    BNE ROW_LOOP

    LDA IMG_W
    CLC
    ADC IMG_PTR
    STA IMG_PTR
    LDA #$00
    ADC IMG_PTR_H
    STA IMG_PTR_H

    LDA #32
    CLC
    ADC SCR_PTR
    STA SCR_PTR
    LDA #$00
    ADC SCR_PTR_H
    STA SCR_PTR_H

    DEC IMG_H
    BNE ROW_COPY

    RTS

; =================== Subroutine: PRINT_STR ===================
; (Renamed from PRINT)
PRINT_STR:
    PLA
    CLC
    ADC #$01
    STA PRNT_PTR
    PLA
    STA PRNT_PTR_H
    TYA
    PHA
    LDY #$00
PRINT_LOOP:
    LDA (PRNT_PTR),Y
    BEQ STR_DONE
    JSR PUT_CHAR
    INY
    JMP PRINT_LOOP
STR_DONE:
    TYA
    CLC
    ADC PRNT_PTR
    STA PRNT_PTR
    LDA PRNT_PTR_H
    ADC #$00
    STA PRNT_PTR_H
    PLA
    TAY
    LDA PRNT_PTR_H
    PHA
    LDA PRNT_PTR
    PHA
    RTS

; =================== Subroutine: GET_NUMBER ===================
; (Renamed from GETNUM)
GET_NUMBER:
    TXA
    PHA
    TYA
    PHA
    LDX #$00
    STX NUM1_BUF
    STX NUM2_BUF
NUM_CURSOR:
    LDA #$A0       ; black square for cursor background
    JSR PUT_CHAR
    LDA #$83       ; left cursor symbol
    JSR PUT_CHAR
GET_KEY:
    JSR GET_CHAR
    CMP #$00
    BEQ GET_KEY
    CMP #$08      ; BACKSPACE
    BEQ NUM_BACKSPACE
    CMP #$0D      ; ENTER
    BEQ NUM_ENTER
    CMP #$30
    BMI GET_KEY
    CMP #$3A
    BMI NUM_DIGIT
    JMP GET_KEY
NUM_ENTER:
    CPX #$00
    BEQ GET_KEY
    LDA #$20
    JSR PUT_CHAR
    LDA #$0D
    JSR PUT_CHAR
    LDA NUM1_BUF
    CPX #$01
    BEQ NUM_DONE
    ASL
    ASL
    ASL
    ASL
    ORA NUM2_BUF
NUM_DONE:
    STA NUM1_BUF
    PLA
    TAY
    PLA
    TAX
    LDA NUM1_BUF
    RTS
NUM_DIGIT:
    CPX #$02
    BPL GET_KEY
    PHA
    JSR PUT_CHAR
    PLA
    AND #$0F
    STA NUM1_BUF,X
    INX
    JMP NUM_CURSOR
NUM_BACKSPACE:
    CPX #$00
    BEQ GET_KEY
    LDA #$20
    JSR PUT_CHAR
    LDA #$83
    JSR PUT_CHAR
    JSR PUT_CHAR
    LDA #$20
    JSR PUT_CHAR
    LDA #$83
    JSR PUT_CHAR
    DEX
    LDA #$00
    STA NUM1_BUF,X
    JMP NUM_CURSOR

; =================== Subroutine: UPDATE_GFX ===================
; (Renamed from update_value, with internal labels renamed)
UPDATE_GFX:
    CMP #$31       ; compare with ASCII '0'
    BMI SET_GFX_0
    CMP #$32
    BMI SET_GFX_1
    CMP #$33
    BMI SET_GFX_2
    CMP #$34
    BMI SET_GFX_3
    CMP #$35
    BMI SET_GFX_4
    CMP #$36
    BMI SET_GFX_5
    CMP #$37
    BMI SET_GFX_6
    CMP #$38
    BMI SET_GFX_7
    CMP #$39
    BMI SET_GFX_8
    CMP #$40
    BMI SET_GFX_9
    RTS
SET_GFX_0:
    LDA #<N_0
    STA $16
    LDA #>N_0
    STA $17
    RTS
SET_GFX_1:
    LDA #<N_1
    STA $16
    LDA #>N_1
    STA $17
    RTS
SET_GFX_2:
    LDA #<N_2
    STA $16
    LDA #>N_2
    STA $17
    RTS
SET_GFX_3:
    LDA #<N_3
    STA $16
    LDA #>N_3
    STA $17
    RTS
SET_GFX_4:
    LDA #<N_4
    STA $16
    LDA #>N_4
    STA $17
    RTS
SET_GFX_5:
    LDA #<N_5
    STA $16
    LDA #>N_5
    STA $17
    RTS
SET_GFX_6:
    LDA #<N_6
    STA $16
    LDA #>N_6
    STA $17
    RTS
SET_GFX_7:
    LDA #<N_7
    STA $16
    LDA #>N_7
    STA $17
    RTS
SET_GFX_8:
    LDA #<N_8
    STA $16
    LDA #>N_8
    STA $17
    RTS
SET_GFX_9:
    LDA #<N_9
    STA $16
    LDA #>N_9
    STA $17
    RTS

; =================== Image Data Definitions ===================
G_O:
    DCB $11,$11,$11,$11,$11
    DCB $11,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11
    DCB $00,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11

N_0:
    DCB $00,$11,$11,$11,$00
    DCB $11,$00,$00,$00,$11
    DCB $11,$00,$00,$00,$11
    DCB $11,$00,$00,$00,$11
    DCB $00,$11,$11,$11,$00

N_1:
    DCB $00,$11,$11,$00,$00
    DCB $11,$00,$11,$00,$00
    DCB $11,$00,$11,$00,$00
    DCB $00,$00,$11,$00,$00
    DCB $11,$11,$11,$11,$11

N_2:
    DCB $00,$11,$11,$11,$11
    DCB $11,$00,$00,$11,$00
    DCB $00,$00,$11,$00,$00
    DCB $00,$11,$00,$00,$11
    DCB $11,$11,$11,$11,$00

N_3:
    DCB $11,$11,$11,$11,$11
    DCB $00,$00,$00,$00,$11
    DCB $00,$00,$11,$11,$11
    DCB $00,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11

N_4:
    DCB $00,$00,$00,$11,$00
    DCB $00,$00,$11,$11,$00
    DCB $00,$11,$00,$11,$00
    DCB $11,$11,$11,$11,$11
    DCB $00,$00,$00,$11,$00

N_5:
    DCB $11,$11,$11,$11,$11
    DCB $11,$00,$00,$00,$00
    DCB $11,$11,$11,$11,$11
    DCB $00,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11

N_6:
    DCB $11,$11,$11,$11,$11
    DCB $11,$00,$00,$00,$00
    DCB $11,$11,$11,$11,$11
    DCB $11,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11

N_7:
    DCB $11,$11,$11,$11,$00
    DCB $00,$00,$00,$11,$00
    DCB $00,$00,$11,$11,$11
    DCB $00,$00,$00,$11,$00
    DCB $00,$00,$00,$11,$00

N_8:
    DCB $11,$11,$11,$11,$11
    DCB $11,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11
    DCB $11,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11

N_9:
    DCB $11,$11,$11,$11,$11
    DCB $11,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11
    DCB $00,$00,$00,$00,$11
    DCB $11,$11,$11,$11,$11

G_X:
    DCB $07,$00,$00,$00,$07
    DCB $00,$07,$00,$07,$00
    DCB $00,$00,$07,$00,$00
    DCB $00,$07,$00,$07,$00
    DCB $07,$00,$00,$00,$07

G_BLANK:
    DCB $00,$00,$00,$00,$00
    DCB $00,$00,$00,$00,$00
    DCB $00,$00,$00,$00,$00
    DCB $00,$00,$00,$00,$00
    DCB $00,$00,$00,$00,$00
